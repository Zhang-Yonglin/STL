1 deque 双端数组 ，操作特点：在两端插入和删除效率都比较高，在指定位置插入，也会引起数据元素的移动。
  支持随机访问
  deque分段连续的内存空间

2. stack容器 规则：先进后出
   不能遍历 不提供迭代器 也不支持随机访问
   while(!stack.empty()){
	cout << stack.top() << endl;
	stack.pop();
    }
3. queue队列 规则：先进先出
   不能遍历 不提供迭代器 也不支持随机访问
   while(!queue.empty()){
	cout << queue.fonr() << endl;
	queue.pop();
   }

4. list容器 非常常用 ST中双向链表
   在任何位置插入和删除效率都比较好，因为插入和删除时候相对于数组来说，不需要移动元素
   缺点：不支持随机访问 因为非连续的内存空间，所以说为了保存结点和结点之间的前驱后继关系，
   需要额外的空间开销。
   
   自己提供了sort()方法，为什么？因为不支持随机访问，如果使用算法提供的sort，效率会不稳定
   set.find() 你要清楚，查找基础数据类型、查找对象、提供回调(条件)

5. 对组pair 将两个值合并成一个值，三种赋值方法如下：
   pair<string,int> pair1;
   make_pair("aaa",1);
   pair3 = pair1;
  
  
